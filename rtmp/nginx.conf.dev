daemon off;

include /etc/nginx/sites-enabled/*.conf; # Include all the optional configuration files stored here.
error_log ${LOG_PATH}/stdout_rtmp.log info;

events {
    worker_connections 1024;
}

rtmp {
    server {
        listen ${RTMP_PORT};
        chunk_size 4000;

        application live {
            live on;
            record off;

            on_publish http://${API_ENDPOINT}:${API_PORT}/live-sessions/on-publish;
            on_publish_done http://${API_ENDPOINT}:${API_PORT}/live-sessions/on-publish-done;

            push rtmp://localhost:${RTMP_PORT}/live_verified;
        }

        application live_verified {
            live on;
            interleave on;

            allow publish 127.0.0.1;
            deny publish all;

            exec_publish ffmpeg -i rtmp://localhost:${RTMP_PORT}/live_verified/$name  -ss 00:00:01.000 -frames:v 1 -vf scale=-1:480 ${VOD_PATH}/$name/thumbnail.png ;

            exec_push ffmpeg -i rtmp://localhost:${RTMP_PORT}/live_verified/$name
              -c:a libfdk_aac -b:a 128k -c:v libx264 -b:v 2800k -f flv -g 30 -r 60 -filter:v "scale='min(1280, iw)':'min(720, ih)'" -preset superfast -profile:v baseline -f tee "rtmp://localhost:${RTMP_PORT}/hls/$name_720p2628kbs|rtmp://localhost:${RTMP_PORT}/recorder/$name"
              # -c:a libfdk_aac -b:a 128k -c:v libx264 -b:v 1000k -f flv -g 30 -r 30 -s 854x480 -preset superfast -profile:v baseline rtmp://localhost:${RTMP_PORT}/hls/$name_480p1128kbs
              # -c:a libfdk_aac -b:a 96k -c:v libx264 -b:v 800k -f flv -g 30 -r 24 -filter:v "scale='min(640, iw)':'min(360, ih)'" -preset superfast -profile:v baseline rtmp://localhost:${RTMP_PORT}/hls/$name_360p878kbs
              -c:a libfdk_aac -b:a 64k -c:v libx264 -b:v 200k -f flv -g 30 -r 24 -filter:v "scale='min(256, iw)':'min(144, ih)'" -preset superfast -profile:v baseline rtmp://localhost:${RTMP_PORT}/hls/$name_144p200kbs;
        }

        application recorder {
            live on;
            recorder all {		
                record all;				# off|all|audio|video|keyframes|manual. These options speak for themselves.
                record_path ${RECORD_PATH};	# Folder location that will be used to store the recordings.
                record_unique on;			# on|off. Appends timestamp to recorded files. Otherwise the same file is re-written each time. Default=-off
                record_append off;			# on|off. When turned on recorder appends new data to the old file with no gap. Default=off
                record_lock on;				# on|off. When turned on recorded file gets locked with 'fcntl' call. Default=off.
                record_notify off;			# on|off. Toggles sending "NetStream.Record.Start" and "NetStream.Record.Stop" status messages. Default=off.
                # record_max_size 4096M;		# Set maximum file size of the recorded files. No default.
                # record_max_frames 200;		# Sets maximum number of video frames per recorded file. No default.
                # record_interval 15m;			# Restart recording after this number of (milli)seconds/minutes. Zero means no delay. Default=off.
            }
            # on_record_done http://${API_ENDPOINT}:${API_PORT}/live-sessions/on-record-done;
        }

        application hls {
            live on;
            hls on;
            hls_fragment 4;
            hls_path ${LIVE_PATH};
            hls_nested on;
            hls_cleanup off;

            allow publish 127.0.0.1;
            deny publish all;

            exec_publish_done bash -c 'echo "#EXT-X-ENDLIST" >> `
              `${LIVE_PATH}/$name/index.m3u8';
            # on_publish_done http://host.docker.internal:27361/live-sessions/on-hls-done;

            hls_variant _720p2628kbs BANDWIDTH=3000000,RESOLUTION=1280x720;
            # hls_variant _480p1128kbs BANDWIDTH=1128000,RESOLUTION=854x480;
            # hls_variant _360p878kbs BANDWIDTH=1000000,RESOLUTION=640x360;
            hls_variant _144p200kbs BANDWIDTH=250000,RESOLUTION=256x144;
        }
    }
}

http {
    sendfile off;
    tcp_nopush on;
    server_tokens off;
    access_log ${LOG_PATH}/stdout_http.log combined;

    # Uncomment these lines to enable SSL.
    # ssl_protocols TLSv1.2 TLSv1.3;
    # ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    # ssl_prefer_server_ciphers off;
    # ssl_session_cache shared:SSL:10m;
    # ssl_session_timeout 1d;

    server {
        listen ${STATIC_PORT};

        # location / {
        #      root /www;
        #  }
        
        location /vod {
            alias ${VOD_PATH};
            types {
                application/vnd.apple.mpegurl m3u8;
                application/octet-stream ts;
            }
            add_header Cache-Control no-cache;
            add_header Access-Control-Allow-Origin *;
        }


        location /live {
          alias ${LIVE_PATH};
          types {
              application/vnd.apple.mpegurl m3u8;
              application/octet-stream ts;
          }
          add_header Cache-Control no-cache;
          add_header Access-Control-Allow-Origin *;
        }

        location /stat {
            rtmp_stat all;
            rtmp_stat_stylesheet stat.xsl;
        }

        location /stat.xsl {
            root /www/static;
        }

        location /crossdomain.xml {
            default_type text/xml;
            expires 24h;
        }
    }
}
