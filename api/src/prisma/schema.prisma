//******** AUTO GENERATED FILE, DO NOT EDIT.  *********

// Base prisma file, use prisma-merge (https://www.npmjs.com/package/prisma-merge) 
// to find *.schema.prisma files  automatically in directory and generate final schema.prisma file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator nestgraphql {
    provider = "node node_modules/prisma-nestjs-graphql"
    // for yarn monorepos
    // provider = "prisma-nestjs-graphql"
    output = "./@generated"
}

model Comment {
    id      Int    @unique @default(autoincrement())
    content String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId  Int 
    video   Video? @relation(fields: [videoId], references: [id], onDelete: Cascade)
    videoId Int?

    parentComment   Comment? @relation("childComments", fields: [parentCommentId], references: [id], onDelete: Cascade)
    parentCommentId Int?

    childComments Comment[] @relation("childComments")
    votes         Vote[]
}


model LiveSession {
    id Int @id @default(autoincrement())

    status Int @default(0)
    /// @HideField({ match: '@(StreamKey|LiveSession)Create*Input' })
    streamKey StreamKey @relation(fields: [streamKeyId], references: [id])
    streamKeyId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)
    videoId Int @unique
}

model OAuthLink {
    provider String
    providerId String @unique

    user User @relation(fields: [userId], references: [id])
    userId Int

    @@id([provider, providerId])
}

model PermissionsOnRoles {
    role         Role       @relation(fields: [roleId], references: [id])
    roleId       Int // relation scalar field (used in the `@relation` attribute above)
    permission   Permission @relation(fields: [permissionId], references: [id])
    permissionId Int // relation scalar field (used in the `@relation` attribute above)
    createdAt    DateTime   @default(now())

    @@id([roleId, permissionId])
}


model Permission {
    id Int @unique @id @default(autoincrement())
    name String @unique

    roles PermissionsOnRoles[]
    
}

model Role {
    id   Int    @id @unique @default(autoincrement())
    name String @unique

    permissions PermissionsOnRoles[]
    users       User[]
}


model StreamKey {
    id Int @id @default(autoincrement())

    name String
    desc String

    key String @unique @default(uuid())
    createdAt DateTime @default(now())
    isDefault Boolean @default(false)

    user User @relation(fields: [userId], references: [id])
    userId Int

    liveSessions LiveSession[]
}

model UserSubscription {
    user              User     @relation("subscribingBy", fields: [userId], references: [id])
    userId            Int
    subscribingUser   User     @relation("subscribingTo", fields: [subscribingUserId], references: [id])
    subscribingUserId Int // relation scalar field (used in the `@relation` attribute above)
    createdAt         DateTime @default(now())

    @@id([userId, subscribingUserId])
}


model User {
    id       Int      @id @default(autoincrement())
    email    String   @unique
    username String   @unique
    gender   Boolean? @default(true)

    name String @default("UNNAMED_USER")

    /// @HideField({output: true, input: true})
    password String

    avatar    Json?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    role   Role @relation(fields: [roleId], references: [id])
    roleId Int

    subscribingUsers UserSubscription[] @relation("subscribingBy")
    subscribers      UserSubscription[] @relation("subscribingTo")

    oauthLinks OAuthLink[]

    videos     Video[]
    comments   Comment[]
    votes      Vote[]
    views View[]

    streamKeys StreamKey[]

    /// @HideField({output: false, input: true})
    verified Boolean? @default(false)

}


model Video {
    id Int @id @default(autoincrement())

    name String
    desc String?

    /// @HideField({input: true, output: true})
    searchableName String?

    thumbnail Json?

    slug String? @unique

    privacy Int? @default(0) 

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

/// @HideField({input: true, output: false})
    duration Float @default(0)

    /// @HideField({input: true, output: false})
    dirId String? @unique

    /// @HideField({match: 'VideoCreate*Input'})
    user User @relation(fields: [userId], references: [id])
    userId Int

    liveSession LiveSession?
    vodSession VodSession?

    comments Comment[]
    votes Vote[] 
    views View[]
}

model View {
    id Int @id @default(autoincrement())

    ip String 

    user User? @relation(references: [id], fields: [userId])
    userId Int?

    video Video @relation(references: [id], fields: [videoId])
    videoId Int

    createdAt DateTime @default(now())
}

model VodSession {
    id Int @id @default(autoincrement())

    status Int @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)
    videoId Int @unique
}

model Vote {
    id            Int @id @default(autoincrement())
    voteDirection Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    Int
    comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
    commentId Int?
    video     Video?   @relation(fields: [videoId], references: [id], onDelete: Cascade)
    videoId   Int?
}
